{"mappings":"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","sources":["public/components/tasks.js"],"sourcesContent":["/*//////////////////////////////////////////////////////////\n///////////// start TASK ITEMS & LIST start/////////////////\n//////////////////////////////////////////////////////////*/\n\nconst taskForm = document.getElementById(\"taskform\");\nconst button = document.querySelector(\"#taskform > button\")\nvar taskInput = document.getElementById(\"taskInput\");\nvar tasklist = document.querySelector(\"#taskList > ul\")\n\nvar taskNameInput = document.getElementById(\"taskNameInput\");\nvar descriptionInput = document.getElementById(\"descriptionInput\");\nvar dueDateInput = document.getElementById(\"dueDateInput\");\nvar statusInput = document.getElementById(\"statusInput\");\nvar estimatedTimeHrInput = document.getElementById(\"estimatedTimeHrInput\");\nvar estimatedTimeMinInput = document.getElementById(\"estimatedTimeMinInput\");\nvar priorityInput = document.getElementsByName(\"priority\");\n\n//Function: Task form submit\ntaskForm.addEventListener(\"submit\", function (event) {\n  event.preventDefault();\n  //validate input values\n  let task = taskInput.value;\n  let description = descriptionInput.value;\n  let dueDate = dueDateInput.value;\n  var categoryInput = document.querySelectorAll('input[id=categoryInput]:checked');\n  let category = Array.from(categoryInput).map(checkbox => checkbox.value);\n  let status = statusInput.value;\n  let estimatedTimeHr = estimatedTimeHrInput.value;\n  let estimatedTimeMin = estimatedTimeMinInput.value;\n  let priority;\n  for (i = 0; i < priorityInput.length; i++) {\n    if (priorityInput[i].checked)\n      priority = priorityInput[i].value;\n  }\n\n  addTaskModal.classList.remove(\"active\");\n  overlay.classList.remove(\"active\");\n\n  if (task) {\n    addTask(task, description, dueDate, category, status, estimatedTimeHr, estimatedTimeMin, priority);\n  }\n});\n\n//Function: Add task\nfunction addTask(taskName, description, dueDate, category, status, estimatedTimeHr, estimatedTimeMin, priority) {\n  let task = {\n    id: Date.now(),\n    taskName,\n    description,\n    dueDate,\n    category,\n    status,\n    estimatedTimeHr,\n    estimatedTimeMin,\n    priority,\n  };\n  console.log(taskListArray);\n  taskListArray.push(task);\n  //Store new tasks in local storage\n  localStorage.setItem(\"tasks\", JSON.stringify(taskListArray));\n  renderTask(task);\n};\n\n//Load the saved tasks\nlet taskListArray = JSON.parse(localStorage.getItem(\"tasks\")) || [];\n//Render saved tasks\ntaskListArray.forEach(renderTask);\n\n\n//Function: Create new task on page\nfunction renderTask(task) {\n  // Create HTML elements\n  let item = document.createElement(\"article\");\n  item.setAttribute('data-id', task.id);\n  item.innerHTML = \"<p>\" + task.taskName + \"</p>\" +\n    \"<p>\" + task.description + \"</p>\" +\n    \"<span>\" + task.dueDate + \"</span>\" +\n    \"<span>\" + task.priority + \"</span>\" +\n    \"<span>\" + task.category + \"</span>\";\n\n  tasklist.appendChild(item);\n\n  //Add draggable attribute to cards when task is created\n  item.setAttribute('draggable', \"true\");\n  item.classList.add('taskCard');\n  item.addEventListener(\"dragstart\", dragStart);\n  item.addEventListener(\"dragend\", dragEnd);\n\n    /*\n       Append cards to columns based on priority \n      if (task.status === column ul id){\n        dropCol.appendChild(item)????\n      }\n      - if statements for each status?\n    */\n\n  // Extra Task DOM elements\n  let delButton = document.createElement(\"button\");\n  let delButtonText = document.createTextNode(\"Delete Task\");\n  delButton.appendChild(delButtonText);\n  item.appendChild(delButton);\n\n  // Event Listeners for DOM elements\n  delButton.addEventListener(\"click\", function (event) {\n    event.preventDefault();\n    let id = event.target.parentElement.getAttribute('data-id');\n    let index = taskListArray.findIndex(task => task.id === Number(id));\n    removeItemFromArray(taskListArray, index)\n    item.remove();\n    taskListArray =  taskListArray.filter((e) => e !== item); //Remove saved task  \n    localStorage.setItem(\"tasks\", JSON.stringify(taskListArray)) //Update \n  });\n\n  //Editing a task \n  let editButton = document.createElement(\"button\");\n  editButton.innerHTML = \"<i class='fa fa-edit'></i>\"\n  item.appendChild(editButton);\n\n  // Clear the input form\n  taskForm.reset(); \n}\n\n// Clear the input form\ntaskForm.reset();\n\nfunction removeItemFromArray(arr, index) {\n  if (index > -1) {\n    arr.splice(index, 1)\n  }\n  return arr;\n}\n\n//------------- MODAL POP-UP FORMS START -------------//\nconst modal = document.getElementsByName(\".modal\");\nconst btns = document.querySelectorAll(\"[data-target]\");\nconst close_btns = document.querySelectorAll(\".close-modals\");\nconst overlay = document.getElementById(\"overlay\");\n\nbtns.forEach((btn) => {\n  btn.addEventListener(\"click\", () => {\n    document.querySelector(btn.dataset.target).classList.add(\"active\");\n    overlay.classList.add(\"active\");\n  });\n});\n\nclose_btns.forEach((btn) => {\n  btn.addEventListener(\"click\", () => {\n    document.querySelector(btn.dataset.target).classList.remove(\"active\");\n    overlay.classList.remove(\"active\");\n  });\n});\n//------------- end MODAL POP-UP FORMS end -------------//\n\n/*//////////////////////////////////////////////////////////\n////////////////// start TASK BOARD start //////////////////\n//////////////////////////////////////////////////////////*/\n\n/*-------- start DRAGGABLE TASK CARDS/ITEMS start --------*/\n\n/*\n    ðŸŸ¥ ðŸŸ¥  Task cards wont drop into newly created columns\n*/\nconst taskCards = document.querySelectorAll(\".taskCard\");\nconst allCol = document.querySelectorAll(\".statusColumn ul\");\nlet draggableTask = null;\n\ntaskCards.forEach((taskCard) => {\n  taskCard.addEventListener(\"dragstart\", dragStart);\n  taskCard.addEventListener(\"dragend\", dragEnd);\n});\n\nfunction dragStart() {\n  draggableTask = this;\n  setTimeout(() => {\n    this.style.display = \"none\";\n  }, 0);\n  console.log(\"dragStart\");\n}\n\nfunction dragEnd() {\n  draggableTask = null;\n  setTimeout(() => {\n    this.style.display = \"block\";\n  }, 0);\n  console.log(\"dragEnd\");\n}\n\nallCol.forEach(dropCol => {\n  dropCol.addEventListener(\"dragover\", dragOver);\n  dropCol.addEventListener(\"dragenter\", dragEnter);\n  dropCol.addEventListener(\"dragleave\", dragLeave);\n  dropCol.addEventListener(\"drop\", dragDrop);\n});\n\nfunction dragOver(event) {\n  event.preventDefault();\n}\n\nfunction dragEnter() {\n  this.style.border = \"1px solid red\";\n  console.log(\"dragEnter\");\n}\n\nfunction dragLeave() {\n  this.style.border = \"none\";\n  console.log(\"dragLeave\");\n}\n\nfunction dragDrop() {\n  this.style.border = \"none\";\n  this.appendChild(draggableTask);\n  console.log();\n}\n/*-------- end DRAGGABLE TASK CARDS/ITEMS end --------*/\n\n/*-------- start ADD TASK BOARD COLUMN start --------*/\n/*\n    ðŸŸ¥ add value to newly added cols & add this to status menu  \n*/\nconst container = document.querySelector(\"#task-board-container\")\nvar colInput = document.getElementById(\"columnInput\");\nvar setVal = document.getElementById(\"templ_status_col\");\nconst addColButton = document.querySelector(\"#columnForm > button\")\n\n//Event listener for creating a column when add col btn is pressed\naddColButton.addEventListener(\"click\", createColumn);\n\nfunction createColumn(){\n  event.preventDefault();\n  //Create clone of column 'template' & append to board container when saved\n  var t = document.getElementsByTagName(\"template\")[0];\n  var clone = t.content.cloneNode(true);\n  container.appendChild(clone);\n  //Create column title based on user input value\n  let colName = colInput.value;\n  templ_col_title.innerHTML = colName;\n  tasklist.classList.add(\"e\");\n  //console.log(colName);\n  //update visibility of modal & overlay form when opened/closed\n  addColumnModal.classList.remove(\"active\");\n  overlay.classList.remove(\"active\");\n\n}\n/*-------- end ADD TASK BOARD COLUMN end --------*/\n\n"],"names":["$85c951caf833aeea$var$taskForm","document","getElementById","querySelector","$85c951caf833aeea$var$taskInput","$85c951caf833aeea$var$tasklist","$85c951caf833aeea$var$descriptionInput","$85c951caf833aeea$var$dueDateInput","$85c951caf833aeea$var$statusInput","$85c951caf833aeea$var$estimatedTimeHrInput","$85c951caf833aeea$var$estimatedTimeMinInput","$85c951caf833aeea$var$priorityInput","getElementsByName","addEventListener","event","preventDefault","task","value","description","dueDate","categoryInput","querySelectorAll","priority","category","Array","from","map","checkbox","status","estimatedTimeHr","estimatedTimeMin","i","length","checked","addTaskModal","classList","remove","$85c951caf833aeea$var$overlay","taskName","id","Date","now","console","log","$85c951caf833aeea$var$taskListArray","push","localStorage","setItem","JSON","stringify","$85c951caf833aeea$var$renderTask","$85c951caf833aeea$var$addTask","parse","getItem","task1","item","createElement","setAttribute","innerHTML","appendChild","add","$85c951caf833aeea$var$dragStart","$85c951caf833aeea$var$dragEnd","delButton","delButtonText","createTextNode","target","parentElement","getAttribute","index","findIndex","Number","arr","splice","$85c951caf833aeea$var$removeItemFromArray","filter","e","editButton","reset","forEach","$85c951caf833aeea$var$btns","$85c951caf833aeea$var$close_btns","btn","dataset","$85c951caf833aeea$var$taskCards","$85c951caf833aeea$var$allCol","$85c951caf833aeea$var$draggableTask","this","setTimeout","style","display","$85c951caf833aeea$var$dragOver","$85c951caf833aeea$var$dragEnter","border","$85c951caf833aeea$var$dragLeave","$85c951caf833aeea$var$dragDrop","taskCard","dropCol","$85c951caf833aeea$var$container","$85c951caf833aeea$var$colInput","clone","getElementsByTagName","content","cloneNode","colName","templ_col_title","addColumnModal"],"version":3,"file":"task-board.d515ac68.js.map"}